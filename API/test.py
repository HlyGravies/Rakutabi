import requests
import time
import json
import os
import datetime
from multiprocessing.dummy import Pool as ThreadPool
from functools import partial

# --- C·∫§U H√åNH C·ª¶A B·∫†N ---
API_KEY = "AIzaSyAmbdRFOMwNlwiUD-LEwTvvJ6Twb0JlpmU"
USER_LOCATION = "34.6872571,135.5258546" # (V√≠ d·ª•: Tokyo Tower)
USER_RADIUS = 30000

# ‚ö†Ô∏è QUAN TR·ªåNG: Ch·ªâ ƒë·ªãnh c√°c tr∆∞·ªùng (fields) b·∫°n mu·ªën l·∫•y
# T√°ch c√°c tr∆∞·ªùng Basic (mi·ªÖn ph√≠) v√† c√°c tr∆∞·ªùng tr·∫£ ph√≠
# (Tr∆∞·ªùng 'place_id', 'name', 'geometry' ƒë√£ c√≥ t·ª´ NearbySearch)
# ‚ö†Ô∏è QUAN TR·ªåNG: Ch·ªâ ƒë·ªãnh c√°c tr∆∞·ªùng (fields) b·∫°n mu·ªën l·∫•y

PLACE_DETAILS_FIELDS = [
    # --- Basic Data (Mi·ªÖn ph√≠) ---
    "place_id",      # <--- TH√äM D√íNG N√ÄY V√ÄO
    
    # --- Contact Data (T√≠nh ph√≠) ---
    "formatted_phone_number",
    "website",
    
    # --- Atmosphere Data (T√≠nh ph√≠) ---
    "opening_hours", 
    "rating",        
    "reviews",       # (C·ªßa b·∫°n ƒë√£ c√≥)
    "user_ratings_total", 
    "price_level",
    "photos"    
]
# Chuy·ªÉn th√†nh string ƒë·ªÉ truy·ªÅn v√†o API
FIELDS_STRING = ",".join(PLACE_DETAILS_FIELDS)
# -------------------------

# üß† B∆∞·ªõc 1: "B·∫£n ƒë·ªì" √°nh x·∫°
# üß† "B·∫£n ƒë·ªì" √°nh x·∫° ƒë·∫ßy ƒë·ªß (Full Preference Map)
# √Ånh x·∫° ID s·ªü th√≠ch c·ªßa b·∫°n t·ªõi chi·∫øn l∆∞·ª£c g·ªçi Google Places API
preference_to_api_map = {
    # === Ë¶≥ÂÖâ„ÉªÊé¢Á¥¢ (Tham quan) ===
    "pref_landmark": {"type": "tourist_attraction", "keyword": "ÂêçÊâÄ „É©„É≥„Éâ„Éû„Éº„ÇØ"},
    "pref_shrine": {"type": "tourist_attraction", "keyword": "Á•ûÁ§æ‰ªèÈñ£"},
    "pref_historical": {"type": "tourist_attraction", "keyword": "Ê≠¥Âè≤ÁöÑÂª∫ÈÄ†Áâ© Âè≤Ë∑°"},
    "pref_viewpoint": {"type": "tourist_attraction", "keyword": "Â±ïÊúõÂè∞ „Éì„É•„Éº„Çπ„Éù„ÉÉ„Éà"},
    "pref_pilgrimage": {"type": "tourist_attraction", "keyword": "ËÅñÂú∞Â∑°Á§º"},
    "pref_tower": {"type": "tourist_attraction", "keyword": "„Çø„ÉØ„Éº È´òÂ±§„Éì„É´"},
    "pref_hidden_gem": {"type": "tourist_attraction", "keyword": "Á©¥Â†¥„Çπ„Éù„ÉÉ„Éà"},
    "pref_free_spot": {"strategy": "FILTER_BY_PRICE_LEVEL", "notes": "L·ªçc ƒë·ªãa ƒëi·ªÉm c√≥ price_level=0 ho·∫∑c kh√¥ng c√≥"},
    "pref_museum_art": {"type": "art_gallery"},
    "pref_museum_history": {"type": "museum"},

    # === „É™„É©„ÉÉ„ÇØ„Çπ„Éª‰ºëÊÜ© (Th∆∞ gi√£n) ===
    "pref_cafe": {"type": "cafe"},
    "pref_kissaten": {"type": "cafe", "keyword": "Âñ´Ëå∂Â∫ó „É¨„Éà„É≠"},
    "pref_park": {"type": "park"},
    "pref_garden": {"type": "park", "keyword": "Â∫≠Âúí"},
    "pref_waterside": {"type": "park", "keyword": "Ê∞¥Ëæ∫ Â∑ù Êπñ"},
    "pref_footbath": {"type": "spa", "keyword": "Ë∂≥ÊπØ"},
    "pref_library": {"type": "library"},
    "pref_net_cafe": {"type": "cafe", "keyword": "Êº´ÁîªÂñ´Ëå∂ „Éç„ÉÉ„Éà„Ç´„Éï„Çß"},
    "pref_sento": {"type": "spa"}, # 'spa' l√† type ƒë√∫ng cho sento/onsen
    "pref_massage": {"type": "spa", "keyword": "„Éû„ÉÉ„Çµ„Éº„Ç∏"},

    # === Áôí„Åó„Éª„Éí„Éº„É™„É≥„Ç∞ (Ch·ªØa l√†nh) ===
    "pref_nature_walk": {"type": "park", "keyword": "Ê£ÆÊûóÊµ¥ Ëá™ÁÑ∂Êï£Á≠ñ"},
    "pref_botanical_garden": {"type": "zoo", "keyword": "Ê§çÁâ©Âúí"}, # Th∆∞·ªùng b·ªã g·ªôp v√†o 'zoo' ho·∫∑c 'park'
    "pref_aroma": {"type": "spa", "keyword": "„Ç¢„É≠„Éû „ÅäÈ¶ô"},
    "pref_spa_este": {"type": "spa", "keyword": "„Çπ„Éë „Ç®„Çπ„ÉÜ"},
    "pref_yoga": {"type": "gym", "keyword": "„É®„Ç¨"},
    "pref_quiet_shrine": {"type": "tourist_attraction", "keyword": "Èùô„Åã Á•ûÁ§æ"},
    "pref_animal_cafe": {"type": "cafe", "keyword": "ÂãïÁâ©„Ç´„Éï„Çß"},
    "pref_music_classic": {"type": "tourist_attraction", "keyword": "Èü≥Ê•ΩÈëëË≥û „ÇØ„É©„Ç∑„ÉÉ„ÇØ"},
    "pref_planetarium": {"type": "museum", "keyword": "„Éó„É©„Éç„Çø„É™„Ç¶„É†"},

    # === „Ç∞„É´„É°„ÉªÈ£ü‰∫ã (·∫®m th·ª±c) ===
    "pref_street_food": {"type": "meal_takeaway", "keyword": "È£ü„ÅπÊ≠©„Åç"},
    "pref_local_gourmet": {"type": "restaurant", "keyword": "BÁ¥ö„Ç∞„É´„É° „ÅîÂΩìÂú∞„Ç∞„É´„É°"},
    "pref_set_meal": {"type": "restaurant", "keyword": "„É≠„Éº„Ç´„É´È£üÂ†Ç ÂÆöÈ£üÂ±ã"},
    "pref_sweets": {"type": "cafe", "keyword": "„Çπ„Ç§„Éº„ÉÑ „Éá„Ç∂„Éº„Éà"},
    "pref_bakery": {"type": "bakery"},
    "pref_ramen": {"type": "restaurant", "keyword": "„É©„Éº„É°„É≥"},
    "pref_sushi": {"type": "restaurant", "keyword": "ÂØøÂè∏"},
    "pref_ethnic": {"type": "restaurant", "keyword": "„Ç®„Çπ„Éã„ÉÉ„ÇØÊñôÁêÜ"},
    "pref_izakaya": {"type": "bar", "keyword": "Â±ÖÈÖíÂ±ã Á´ã„Å°È£≤„Åø"},
    "pref_allyoucan": {"type": "restaurant", "keyword": "È£ü„ÅπÊîæÈ°å È£≤„ÅøÊîæÈ°å"},
    "pref_late_night": {"strategy": "FILTER_BY_OPENING_HOURS", "notes": "L·ªçc ƒë·ªãa ƒëi·ªÉm open_now v√†o ban ƒë√™m"},

    # === Êï£Á≠ñ„ÉªË°óÊ≠©„Åç (D·∫°o ph·ªë) ===
    "pref_alley": {"type": "tourist_attraction", "keyword": "Ë∑ØÂú∞Ë£è Ê®™‰∏Å"},
    "pref_architecture": {"type": "tourist_attraction", "keyword": "Âª∫ÁØâÂ∑°„Çä"},
    "pref_shotengai": {"type": "shopping_mall", "keyword": "ÂïÜÂ∫óË°ó"},
    "pref_slope_stairs": {"type": "tourist_attraction", "keyword": "ÂùÇÈÅì ÈöéÊÆµ"},
    "pref_market": {"type": "store", "keyword": "Â∏ÇÂ†¥ „Éû„Éº„Ç±„ÉÉ„Éà"},
    "pref_window_shopping": {"type": "shopping_mall"},
    "pref_riverside": {"type": "park", "keyword": "Â∑ùÊ≤ø„ÅÑ Êµ∑Ëæ∫ Êï£Ê≠©"},
    "pref_night_walk": {"strategy": "LOGIC_ONLY", "notes": "ƒê√¢y l√† 1 route, kh√¥ng ph·∫£i 1 ƒë·ªãa ƒëi·ªÉm"},

    # === Â≠¶„Å≥„Éª‰ΩìÈ®ì (H·ªçc h·ªèi) ===
    "pref_art_gallery": {"type": "art_gallery"},
    "pref_museum": {"type": "museum"},
    "pref_aquarium_zoo": {"type": ["aquarium", "zoo"]}, # X·ª≠ l√Ω ƒë·∫∑c bi·ªát: g·ªçi 2 API
    "pref_workshop": {"type": "tourist_attraction", "keyword": "„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„Éó ÊñáÂåñ‰ΩìÈ®ì"},
    "pref_crafts": {"type": "store", "keyword": "‰ºùÁµ±Â∑•Ëä∏"},
    "pref_factory_tour": {"type": "tourist_attraction", "keyword": "Â∑•Â†¥Ë¶ãÂ≠¶"},
    "pref_cinema": {"type": "movie_theater"},
    "pref_theater_live": {"type": "night_club", "keyword": "ÂäáÂ†¥ „É©„Ç§„Éñ„Éè„Ç¶„Çπ"},
    "pref_seminar": {"type": "university", "keyword": "Ë¨õÊºî „Çª„Éü„Éä„Éº"},

    # === „Ç∑„Éß„ÉÉ„Éî„É≥„Ç∞ (Mua s·∫Øm) ===
    "pref_souvenir": {"type": "store", "keyword": "„ÅäÂúüÁî£"},
    "pref_zakka": {"type": "store", "keyword": "ÈõëË≤®Â±ã"},
    "pref_select_shop": {"type": "clothing_store", "keyword": "„Çª„É¨„ÇØ„Éà„Ç∑„Éß„ÉÉ„Éó"},
    "pref_used_clothes": {"type": "clothing_store", "keyword": "Âè§ÁùÄÂ±ã"},
    "pref_department_store": {"type": "department_store"},
    "pref_drugstore": {"type": "drugstore"},
    "pref_100yen_shop": {"type": "store", "keyword": "100ÂÜÜ„Ç∑„Éß„ÉÉ„Éó"},
    "pref_local_supermarket": {"type": "supermarket"},
    "pref_electronics": {"type": "electronics_store"},
    "pref_antique": {"type": "store", "keyword": "È™®Ëë£ÂìÅ „Ç¢„É≥„ÉÜ„Ç£„Éº„ÇØ"},

    # === ÂÜôÁúü„ÉªSNSÊò†„Åà (Ch·ª•p ·∫£nh) ===
    "pref_sns_hotspot": {"type": "tourist_attraction", "keyword": "SNS„ÅßË©±È°å „Çπ„Éù„ÉÉ„Éà"},
    "pref_stylish_cafe": {"type": "cafe", "keyword": "„Åä„Åó„ÇÉ„Çå „Ç´„Éï„Çß"},
    "pref_cute_sweets": {"type": "cafe", "keyword": "ÂèØÊÑõ„ÅÑ „Çπ„Ç§„Éº„ÉÑ"},
    "pref_street_art": {"type": "tourist_attraction", "keyword": "Â£ÅÁîª „Çπ„Éà„É™„Éº„Éà„Ç¢„Éº„Éà"},
    "pref_arch_photo": {"type": "tourist_attraction", "keyword": "Âç∞Ë±°ÁöÑ„Å™Âª∫ÁØâ"},
    "pref_night_view": {"type": "tourist_attraction", "keyword": "Â§úÊôØ „É©„Ç§„Éà„Ç¢„ÉÉ„Éó"},
    "pref_retro_spot": {"type": "tourist_attraction", "keyword": "„É¨„Éà„É≠ „Éé„Çπ„Çø„É´„Ç∏„ÉÉ„ÇØ"},
    "pref_scenic_view": {"type": "tourist_attraction", "keyword": "Áµ∂ÊôØ È¢®ÊôØ"},

    # === Ëá™ÁÑ∂„ÉªÈ¢®ÊôØ (Thi√™n nhi√™n) ===
    "pref_park_green": {"type": "park"},
    "pref_garden_jp": {"type": "park", "keyword": "Êó•Êú¨Â∫≠Âúí"},
    "pref_waterside_walk": {"type": "park", "keyword": "Ê∞¥Ëæ∫"},
    "pref_viewpoint_high": {"type": "tourist_attraction", "keyword": "È´òÂè∞ Â±ïÊúõ"},
    "pref_botanical": {"type": "zoo", "keyword": "Ê§çÁâ©Âúí"},
    "pref_seasonal_flower": {"type": "park", "keyword": "Â≠£ÁØÄ„ÅÆËä± Ê°ú Á¥ÖËëâ"},
    "pref_hiking_light": {"type": "park", "keyword": "„Éè„Ç§„Ç≠„É≥„Ç∞"},

    # === Ê∞óÂàÜËª¢Êèõ (X·∫£ stress) ===
    "pref_good_view": {"type": "tourist_attraction", "keyword": "ÊôØËâ≤„ÅÆËâØ„ÅÑÂ†¥ÊâÄ"},
    "pref_quiet_cafe": {"type": "cafe", "keyword": "Èùô„Åã „Ç´„Éï„Çß"},
    "pref_park_walk": {"type": "park"},
    "pref_karaoke": {"type": "night_club", "keyword": "„Ç´„É©„Ç™„Ç±"},
    "pref_game_center": {"type": "amusement_park", "keyword": "„Ç≤„Éº„É†„Çª„É≥„Çø„Éº"},
    "pref_batting_center": {"type": "tourist_attraction", "keyword": "„Éê„ÉÉ„ÉÜ„Ç£„É≥„Ç∞„Çª„É≥„Çø„Éº"},
    "pref_bookstore": {"type": "book_store"},

    # === „É≠„Éº„Ç´„É´‰ΩìÈ®ì (Tr·∫£i nghi·ªám) ===
    "pref_local_market": {"type": "store", "keyword": "Âú∞ÂÖÉ„ÅÆÂ∏ÇÂ†¥"},
    "pref_old_shotengai": {"type": "shopping_mall", "keyword": "Êòî„Å™„Åå„Çâ„ÅÆÂïÜÂ∫óË°ó"},
    "pref_local_super": {"type": "supermarket"},
    "pref_public_bath": {"type": "spa", "keyword": "Èä≠ÊπØ"},
    "pref_yokocho": {"type": "bar", "keyword": "Ê®™‰∏Å È£≤„ÅøÂ±ãË°ó"},
    "pref_local_diner": {"type": "restaurant", "keyword": "„É≠„Éº„Ç´„É´È£üÂ†Ç"},
    "pref_local_event": {"strategy": "LOGIC_ONLY", "notes": "C·∫ßn 1 API kh√°c v·ªÅ s·ª± ki·ªán"},

    # === „Éà„É¨„É≥„Éâ (B·∫Øt trend) ===
    "pref_sns_trending": {"type": "point_of_interest", "keyword": "SNS Ë©±È°å"},
    "pref_new_open": {"type": "point_of_interest", "keyword": "Êñ∞„Ç™„Éº„Éó„É≥"},
    "pref_trending_gourmet": {"type": "restaurant", "keyword": "ÊµÅË°å „Ç∞„É´„É°"},
    "pref_popup_store": {"type": "store", "keyword": "„Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó„Çπ„Éà„Ç¢"},
    "pref_collab_cafe": {"type": "cafe", "keyword": "„Ç≥„É©„Éú„Ç´„Éï„Çß"},

    # === „Ç¢„ÇØ„ÉÜ„Ç£„Éñ (NƒÉng ƒë·ªông) ===
    "pref_walking": {"strategy": "LOGIC_ONLY", "notes": "L√† 1 route"},
    "pref_rental_cycle": {"type": "bicycle_store", "keyword": "„É¨„É≥„Çø„Çµ„Ç§„ÇØ„É´"},
    "pref_bouldering": {"type": "gym", "keyword": "„Éú„É´„ÉÄ„É™„É≥„Ç∞"},
    "pref_game_arcade": {"type": "amusement_park", "keyword": "„Ç≤„Éº„É†„Çª„É≥„Çø„Éº"},
    "pref_sports_watch": {"type": "stadium"},
    "pref_pool": {"type": "gym", "keyword": "„Éó„Éº„É´"},

    # === Ëá™ÂàÜ„Å´„ÅîË§íÁæé (T·ª± th∆∞·ªüng) ===
    "pref_luxury_sweets": {"type": "cafe", "keyword": "È´òÁ¥ö „Çπ„Ç§„Éº„ÉÑ „Éë„Éï„Çß"}, # L·ªçc th√™m price_level
    "pref_good_lunch": {"type": "restaurant", "keyword": "È´òÁ¥ö „É©„É≥„ÉÅ"}, # L·ªçc th√™m price_level
    "pref_spa_treatment": {"type": "spa", "keyword": "„Çπ„Éë „Ç®„Çπ„ÉÜ"},
    "pref_brand_shopping": {"type": "department_store", "keyword": "„Éñ„É©„É≥„Éâ"},
    "pref_hotel_lounge": {"type": "lodging", "keyword": "„Éõ„ÉÜ„É´ „É©„Ç¶„É≥„Ç∏"},
    "pref_luxury_goods": {"type": "store", "keyword": "È´òÁ¥ö ÈõëË≤®"},

    # === Ê∑±Êéò„Çä„Éª„Éû„Éã„Ç¢„ÉÉ„ÇØ (Chuy√™n s√¢u) ===
    "pref_specialty_store": {"type": "store", "keyword": "Â∞ÇÈñÄÂ∫ó"},
    "pref_used_bookstore": {"type": "book_store", "keyword": "Âè§Êõ∏Â∫ó Âè§Êú¨"},
    "pref_record_store": {"type": "store", "keyword": "„É¨„Ç≥„Éº„ÉâÂ∫ó"},
    "pref_theme_cafe": {"type": "cafe", "keyword": "„ÉÜ„Éº„Éû„Ç´„Éï„Çß"},
    "pref_unique_spot": {"type": "tourist_attraction", "keyword": "Áèç„Çπ„Éù„ÉÉ„Éà"},
    "pref_mini_theater": {"type": "movie_theater", "keyword": "„Éü„Éã„Ç∑„Ç¢„Çø„Éº"},
    "pref_architecture_niche": {"type": "tourist_attraction", "keyword": "„Éû„Éã„Ç¢„ÉÉ„ÇØ Âª∫ÁØâ"},

    # === ÊôÇÈñìË™øÊï¥ (Gi·∫øt th·ªùi gian) ===
    "pref_station_cafe": {"type": "cafe", "keyword": "ÈßÖËøë"},
    "pref_bookstore_browse": {"type": "book_store"},
    "pref_100yen_drugstore": {"type": ["store", "drugstore"], "keyword": "100ÂÜÜ„Ç∑„Éß„ÉÉ„Éó"}, # X·ª≠ l√Ω ƒë·∫∑c bi·ªát
    "pref_station_building": {"type": "shopping_mall", "keyword": "ÈßÖ„Éì„É´"},
    "pref_fast_food": {"type": "restaurant", "keyword": "„Éï„Ç°„Çπ„Éà„Éï„Éº„Éâ"},
    "pref_arcade": {"type": "amusement_park", "keyword": "„Ç≤„Éº„É†„Çª„É≥„Çø„Éº"},

    # === ÁÑ°Êñô„ÉªÁØÄÁ¥Ñ (Ti·∫øt ki·ªám) ===
    "pref_free_observatory": {"type": "tourist_attraction", "keyword": "ÁÑ°Êñô Â±ïÊúõÂè∞"},
    "pref_free_museum": {"type": "museum", "keyword": "ÁÑ°Êñô"},
    "pref_public_facility": {"type": ["library", "park"]}, # X·ª≠ l√Ω ƒë·∫∑c bi·ªát
    "pref_park_large": {"type": "park"},
    "pref_free_samples": {"strategy": "LOGIC_ONLY", "notes": "Kh√¥ng th·ªÉ t√¨m b·∫±ng API"},
    "pref_window_shopping_main": {"type": "shopping_mall"},

    # === Â§ú„ÅÆÊ•Ω„Åó„Åø (Ban ƒë√™m) ===
    "pref_night_view_spot": {"type": "tourist_attraction", "keyword": "Â§úÊôØ"},
    "pref_bar": {"type": "bar"},
    "pref_izakaya_hopping": {"type": "bar", "keyword": "Â±ÖÈÖíÂ±ã „ÅØ„Åó„ÅîÈÖí"},
    "pref_night_cafe": {"type": "cafe", "keyword": "Â§ú„Ç´„Éï„Çß"}, # L·ªçc th√™m opening_hours
    "pref_live_house_club": {"type": "night_club"},
    "pref_light_up": {"type": "tourist_attraction", "keyword": "„É©„Ç§„Éà„Ç¢„ÉÉ„Éó „Ç§„É´„Éü„Éç„Éº„Ç∑„Éß„É≥"},
    "pref_night_bowling": {"type": "bowling_alley"},
}

# ‚öôÔ∏è B∆∞·ªõc 2: Worker cho Phase 1 (NearbySearch)
# (Gi·ªØ nguy√™n code t·ª´ tr∆∞·ªõc)
def fetch_places_for_job(job, location, radius):
    endpoint_url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
    all_results_for_this_job = []
    
    params = {
        'location': location,
        'radius': radius,
        'type': job['type'],
        'keyword': job.get('keyword', ''),
        'language': 'ja',
        'key': API_KEY
    }
    page_count = 1
    
    # print(f"[NearbyWorker] B·∫Øt ƒë·∫ßu job: {job}...") # (T·∫Øt b·ªõt log cho ƒë·ª° r·ªëi)

    while True:
        try:
            response = requests.get(endpoint_url, params=params)
            if response.status_code != 200: break
            data = response.json()
            if data['status'] == 'OK':
                all_results_for_this_job.extend(data['results'])
                next_page_token = data.get('next_page_token')
                if next_page_token:
                    page_count += 1
                    time.sleep(2)
                    params = {'pagetoken': next_page_token, 'key': API_KEY}
                else:
                    break
            else:
                break
        except Exception:
            break
            
    # print(f"[NearbyWorker] Ho√†n th√†nh job: {job}. T√¨m th·∫•y {len(all_results_for_this_job)} k·∫øt qu·∫£.")
    return all_results_for_this_job

# ‚öôÔ∏è B∆∞·ªõc 3 (M·ªöI): Worker cho Phase 2 (PlaceDetails)
# ‚öôÔ∏è B∆∞·ªõc 3: Worker cho Phase 2 (PlaceDetails) - ƒê√É D·ªåN D·∫∏P
def fetch_place_details_for_id(place_id, fields_string):
    """
    Th·ª±c thi M·ªòT l·ªánh g·ªçi PlaceDetails cho m·ªôt place_id.
    """
    endpoint_url = "https://maps.googleapis.com/maps/api/place/details/json"
    params = {
        'place_id': place_id,
        'fields': fields_string,
        'language': 'ja',
        'key': API_KEY
    }
    
    try:
        response = requests.get(endpoint_url, params=params)
        if response.status_code == 200:
            data = response.json()
            if data['status'] == 'OK':
                # print(f"[DetailsWorker] L·∫•y th√†nh c√¥ng chi ti·∫øt cho: {place_id}") # T·∫Øt b·ªõt log
                return data['result'] # Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£
        
        # N·∫øu th·∫•t b·∫°i
        print(f"[DetailsWorker L·ªñI] {place_id}: {response.text}")
        return None

    except Exception as e:
        print(f"[DetailsWorker L·ªñI K·∫æT N·ªêI] {place_id}: {e}")
        return None
    
# üèÉ‚Äç‚ôÇÔ∏è B∆∞·ªõc 4 (C·∫¨P NH·∫¨T): H√†m Main ƒë·ªÉ ƒëi·ªÅu ph·ªëi
def find_and_enrich_places(selected_ids, location, radius, fields_to_request_str):
    
    # === PHASE 1: DISCOVERY (Ch·∫°y NearbySearch song song) ===
    
    jobs_to_run = []
    logic_filters = []
    for pref_id in selected_ids:
        strategy = preference_to_api_map.get(pref_id)
        if strategy:
            if "type" in strategy: jobs_to_run.append(strategy)
            elif "strategy" in strategy: logic_filters.append(strategy['strategy'])

    if not jobs_to_run:
        print("Kh√¥ng c√≥ s·ªü th√≠ch n√†o c·∫ßn g·ªçi API.")
        return [], logic_filters

    print(f"--- PHASE 1: ƒêang ch·∫°y {len(jobs_to_run)} NearbySearch jobs song song ---")
    
    pool_size_nearby = 5
    pool_nearby = ThreadPool(pool_size_nearby)
    worker_nearby = partial(fetch_places_for_job, location=location, radius=radius)
    
    results_list_of_lists = pool_nearby.map(worker_nearby, jobs_to_run)
    
    pool_nearby.close()
    pool_nearby.join()

    # G·ªôp v√† L·ªçc tr√πng
    all_basic_results = {} # D√πng dictionary ƒë·ªÉ l·ªçc tr√πng ngay l·∫≠p t·ª©c
    for sublist in results_list_of_lists:
        for place in sublist:
            place_id = place.get('place_id')
            if place_id and place_id not in all_basic_results:
                all_basic_results[place_id] = place

    unique_basic_results = list(all_basic_results.values())
    unique_place_ids = list(all_basic_results.keys())
    
    if not unique_place_ids:
        print("Phase 1 kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm n√†o.")
        return [], logic_filters

    print(f"--- PHASE 1: Ho√†n th√†nh. T√¨m th·∫•y {len(unique_basic_results)} ƒë·ªãa ƒëi·ªÉm duy nh·∫•t. ---")

    # === PHASE 2: ENRICHMENT (Ch·∫°y PlaceDetails song song) ===
    
    print(f"\n--- PHASE 2: ƒêang l·∫•y chi ti·∫øt cho {len(unique_place_ids)} ƒë·ªãa ƒëi·ªÉm song song ---")
    
    # C√≥ th·ªÉ d√πng nhi·ªÅu lu·ªìng h∆°n cho Details v√¨ n√≥ nhanh h∆°n
    pool_size_details = 10 
    pool_details = ThreadPool(pool_size_details)
    
    # G√≥i h√†m worker v√† tham s·ªë 'fields_string'
    worker_details = partial(fetch_place_details_for_id, fields_string=fields_to_request_str)
    
    # 'detailed_results_list' s·∫Ω ch·ª©a c√°c dictionary (ho·∫∑c None n·∫øu l·ªói)
    detailed_results_list = pool_details.map(worker_details, unique_place_ids)
    
    pool_details.close()
    pool_details.join()

    print(f"--- PHASE 2: Ho√†n th√†nh. ---")

    # === G·ªòP K·∫æT QU·∫¢ CU·ªêI C√ôNG ===
    
    # T·∫°o m·ªôt "b·∫£n ƒë·ªì" tra c·ª©u nhanh k·∫øt qu·∫£ Details
    details_map = {res['place_id']: res for res in detailed_results_list if res and 'place_id' in res}
    
    final_merged_list = []
    for basic_place in unique_basic_results:
        place_id = basic_place['place_id']
        if place_id in details_map:
            # G·ªôp data: L·∫•y dict c∆° b·∫£n v√† "c·∫≠p nh·∫≠t" th√™m dict chi ti·∫øt
            basic_place.update(details_map[place_id])
            final_merged_list.append(basic_place)
        else:
            # N·∫øu v√¨ l√Ω do g√¨ ƒë√≥ m√† Details b·ªã l·ªói,
            # ch√∫ng ta v·∫´n gi·ªØ l·∫°i th√¥ng tin c∆° b·∫£n
            basic_place['details_fetch_failed'] = True
            final_merged_list.append(basic_place)
            
    print(f"\nƒê√£ g·ªôp th√†nh c√¥ng {len(final_merged_list)} ƒë·ªãa ƒëi·ªÉm v·ªõi th√¥ng tin chi ti·∫øt.")
    
    return final_merged_list, logic_filters

# üèÅ B∆∞·ªõc 5: Ch·∫°y th·ª≠ V√Ä L∆ØU FILE
if __name__ == "__main__":
    
    user_choices = ['pref_ramen', 'pref_park', 'pref_museum_art']
    
    start_time = time.time()
    
    # Ch·∫°y h√†m ch√≠nh
    final_places, filters_to_apply = find_and_enrich_places(
        user_choices, 
        USER_LOCATION, 
        USER_RADIUS, 
        FIELDS_STRING
    )
    
    end_time = time.time()
    print(f"\n--- T·ªïng th·ªùi gian (c·∫£ 2 phase): {end_time - start_time:.2f} gi√¢y ---")
    print(f"C√°c b·ªô l·ªçc logic c·∫ßn √°p d·ª•ng: {filters_to_apply}")
    
    # --- PH·∫¶N L∆ØU FILE ---
    if final_places:
        OUTPUT_DIR = "/Users/quannguyen/„ÉÅ„Éº„É†Âà∂‰Ωú/Rakutabi/json/test"
        
        now = datetime.datetime.now()
        timestamp = now.strftime("%Y%m%d_%H%M%S")
        safe_prefs = "_".join(user_choices)
        FILENAME = f"EnrichedSearch_{safe_prefs}_{timestamp}.json" # T√™n file m·ªõi
        OUTPUT_FILENAME = os.path.join(OUTPUT_DIR, FILENAME)

        print(f"\nƒêang l∆∞u {len(final_places)} k·∫øt qu·∫£ (ƒë√£ g·ªôp) v√†o: {OUTPUT_FILENAME}...")
        
        try:
            os.makedirs(OUTPUT_DIR, exist_ok=True)
            with open(OUTPUT_FILENAME, 'w', encoding='utf-8') as f:
                json.dump(final_places, f, indent=4, ensure_ascii=False)
            print("ƒê√£ l∆∞u file th√†nh c√¥ng!")
        
        except Exception as e:
            print(f"L·ªñI khi l∆∞u file: {e}")
            
    else:
        print("\nKh√¥ng c√≥ k·∫øt qu·∫£ n√†o ƒë·ªÉ l∆∞u.")