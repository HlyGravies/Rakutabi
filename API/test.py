import requests
import time
import json
import os
import datetime
from multiprocessing.dummy import Pool as ThreadPool
from functools import partial

# --- C·∫§U H√åNH C·ª¶A B·∫†N ---
API_KEY = "AIzaSyAmbdRFOMwNlwiUD-LEwTvvJ6Twb0JlpmU"
USER_LOCATION = "34.6872571,135.5258546" # (V√≠ d·ª•: Tokyo Tower)
USER_RADIUS = 30000

# ‚ö†Ô∏è QUAN TR·ªåNG: Ch·ªâ ƒë·ªãnh c√°c tr∆∞·ªùng (fields) b·∫°n mu·ªën l·∫•y
# T√°ch c√°c tr∆∞·ªùng Basic (mi·ªÖn ph√≠) v√† c√°c tr∆∞·ªùng tr·∫£ ph√≠
# (Tr∆∞·ªùng 'place_id', 'name', 'geometry' ƒë√£ c√≥ t·ª´ NearbySearch)
# ‚ö†Ô∏è QUAN TR·ªåNG: Ch·ªâ ƒë·ªãnh c√°c tr∆∞·ªùng (fields) b·∫°n mu·ªën l·∫•y

PLACE_DETAILS_FIELDS = [
    # --- Basic Data (Mi·ªÖn ph√≠) ---
    "place_id",      # <--- TH√äM D√íNG N√ÄY V√ÄO
    
    # --- Contact Data (T√≠nh ph√≠) ---
    "formatted_phone_number",
    "website",
    
    # --- Atmosphere Data (T√≠nh ph√≠) ---
    "opening_hours", 
    "rating",        
    "reviews",       # (C·ªßa b·∫°n ƒë√£ c√≥)
    "user_ratings_total", 
    "price_level"    
]
# Chuy·ªÉn th√†nh string ƒë·ªÉ truy·ªÅn v√†o API
FIELDS_STRING = ",".join(PLACE_DETAILS_FIELDS)
# -------------------------

# üß† B∆∞·ªõc 1: "B·∫£n ƒë·ªì" √°nh x·∫°
preference_to_api_map = {
    "pref_ramen": {"type": "restaurant", "keyword": "„É©„Éº„É°„É≥"},
    "pref_park": {"type": "park", "keyword": ""},
    "pref_museum_art": {"type": "art_gallery", "keyword": ""},
    "pref_cafe": {"type": "cafe", "keyword": ""},
    "pref_sento": {"type": "spa", "keyword": ""},
    "pref_late_night": {"strategy": "FILTER_BY_OPENING_HOURS"}
}

# ‚öôÔ∏è B∆∞·ªõc 2: Worker cho Phase 1 (NearbySearch)
# (Gi·ªØ nguy√™n code t·ª´ tr∆∞·ªõc)
def fetch_places_for_job(job, location, radius):
    endpoint_url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
    all_results_for_this_job = []
    
    params = {
        'location': location,
        'radius': radius,
        'type': job['type'],
        'keyword': job.get('keyword', ''),
        'language': 'ja',
        'key': API_KEY
    }
    page_count = 1
    
    # print(f"[NearbyWorker] B·∫Øt ƒë·∫ßu job: {job}...") # (T·∫Øt b·ªõt log cho ƒë·ª° r·ªëi)

    while True:
        try:
            response = requests.get(endpoint_url, params=params)
            if response.status_code != 200: break
            data = response.json()
            if data['status'] == 'OK':
                all_results_for_this_job.extend(data['results'])
                next_page_token = data.get('next_page_token')
                if next_page_token:
                    page_count += 1
                    time.sleep(2)
                    params = {'pagetoken': next_page_token, 'key': API_KEY}
                else:
                    break
            else:
                break
        except Exception:
            break
            
    # print(f"[NearbyWorker] Ho√†n th√†nh job: {job}. T√¨m th·∫•y {len(all_results_for_this_job)} k·∫øt qu·∫£.")
    return all_results_for_this_job

# ‚öôÔ∏è B∆∞·ªõc 3 (M·ªöI): Worker cho Phase 2 (PlaceDetails)
# ‚öôÔ∏è B∆∞·ªõc 3: Worker cho Phase 2 (PlaceDetails) - ƒê√É D·ªåN D·∫∏P
def fetch_place_details_for_id(place_id, fields_string):
    """
    Th·ª±c thi M·ªòT l·ªánh g·ªçi PlaceDetails cho m·ªôt place_id.
    """
    endpoint_url = "https://maps.googleapis.com/maps/api/place/details/json"
    params = {
        'place_id': place_id,
        'fields': fields_string,
        'language': 'ja',
        'key': API_KEY
    }
    
    try:
        response = requests.get(endpoint_url, params=params)
        if response.status_code == 200:
            data = response.json()
            if data['status'] == 'OK':
                # print(f"[DetailsWorker] L·∫•y th√†nh c√¥ng chi ti·∫øt cho: {place_id}") # T·∫Øt b·ªõt log
                return data['result'] # Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£
        
        # N·∫øu th·∫•t b·∫°i
        print(f"[DetailsWorker L·ªñI] {place_id}: {response.text}")
        return None

    except Exception as e:
        print(f"[DetailsWorker L·ªñI K·∫æT N·ªêI] {place_id}: {e}")
        return None
    
# üèÉ‚Äç‚ôÇÔ∏è B∆∞·ªõc 4 (C·∫¨P NH·∫¨T): H√†m Main ƒë·ªÉ ƒëi·ªÅu ph·ªëi
def find_and_enrich_places(selected_ids, location, radius, fields_to_request_str):
    
    # === PHASE 1: DISCOVERY (Ch·∫°y NearbySearch song song) ===
    
    jobs_to_run = []
    logic_filters = []
    for pref_id in selected_ids:
        strategy = preference_to_api_map.get(pref_id)
        if strategy:
            if "type" in strategy: jobs_to_run.append(strategy)
            elif "strategy" in strategy: logic_filters.append(strategy['strategy'])

    if not jobs_to_run:
        print("Kh√¥ng c√≥ s·ªü th√≠ch n√†o c·∫ßn g·ªçi API.")
        return [], logic_filters

    print(f"--- PHASE 1: ƒêang ch·∫°y {len(jobs_to_run)} NearbySearch jobs song song ---")
    
    pool_size_nearby = 5
    pool_nearby = ThreadPool(pool_size_nearby)
    worker_nearby = partial(fetch_places_for_job, location=location, radius=radius)
    
    results_list_of_lists = pool_nearby.map(worker_nearby, jobs_to_run)
    
    pool_nearby.close()
    pool_nearby.join()

    # G·ªôp v√† L·ªçc tr√πng
    all_basic_results = {} # D√πng dictionary ƒë·ªÉ l·ªçc tr√πng ngay l·∫≠p t·ª©c
    for sublist in results_list_of_lists:
        for place in sublist:
            place_id = place.get('place_id')
            if place_id and place_id not in all_basic_results:
                all_basic_results[place_id] = place

    unique_basic_results = list(all_basic_results.values())
    unique_place_ids = list(all_basic_results.keys())
    
    if not unique_place_ids:
        print("Phase 1 kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm n√†o.")
        return [], logic_filters

    print(f"--- PHASE 1: Ho√†n th√†nh. T√¨m th·∫•y {len(unique_basic_results)} ƒë·ªãa ƒëi·ªÉm duy nh·∫•t. ---")

    # === PHASE 2: ENRICHMENT (Ch·∫°y PlaceDetails song song) ===
    
    print(f"\n--- PHASE 2: ƒêang l·∫•y chi ti·∫øt cho {len(unique_place_ids)} ƒë·ªãa ƒëi·ªÉm song song ---")
    
    # C√≥ th·ªÉ d√πng nhi·ªÅu lu·ªìng h∆°n cho Details v√¨ n√≥ nhanh h∆°n
    pool_size_details = 10 
    pool_details = ThreadPool(pool_size_details)
    
    # G√≥i h√†m worker v√† tham s·ªë 'fields_string'
    worker_details = partial(fetch_place_details_for_id, fields_string=fields_to_request_str)
    
    # 'detailed_results_list' s·∫Ω ch·ª©a c√°c dictionary (ho·∫∑c None n·∫øu l·ªói)
    detailed_results_list = pool_details.map(worker_details, unique_place_ids)
    
    pool_details.close()
    pool_details.join()

    print(f"--- PHASE 2: Ho√†n th√†nh. ---")

    # === G·ªòP K·∫æT QU·∫¢ CU·ªêI C√ôNG ===
    
    # T·∫°o m·ªôt "b·∫£n ƒë·ªì" tra c·ª©u nhanh k·∫øt qu·∫£ Details
    details_map = {res['place_id']: res for res in detailed_results_list if res and 'place_id' in res}
    
    final_merged_list = []
    for basic_place in unique_basic_results:
        place_id = basic_place['place_id']
        if place_id in details_map:
            # G·ªôp data: L·∫•y dict c∆° b·∫£n v√† "c·∫≠p nh·∫≠t" th√™m dict chi ti·∫øt
            basic_place.update(details_map[place_id])
            final_merged_list.append(basic_place)
        else:
            # N·∫øu v√¨ l√Ω do g√¨ ƒë√≥ m√† Details b·ªã l·ªói,
            # ch√∫ng ta v·∫´n gi·ªØ l·∫°i th√¥ng tin c∆° b·∫£n
            basic_place['details_fetch_failed'] = True
            final_merged_list.append(basic_place)
            
    print(f"\nƒê√£ g·ªôp th√†nh c√¥ng {len(final_merged_list)} ƒë·ªãa ƒëi·ªÉm v·ªõi th√¥ng tin chi ti·∫øt.")
    
    return final_merged_list, logic_filters

# üèÅ B∆∞·ªõc 5: Ch·∫°y th·ª≠ V√Ä L∆ØU FILE
if __name__ == "__main__":
    
    user_choices = ['pref_ramen', 'pref_park', 'pref_museum_art']
    
    start_time = time.time()
    
    # Ch·∫°y h√†m ch√≠nh
    final_places, filters_to_apply = find_and_enrich_places(
        user_choices, 
        USER_LOCATION, 
        USER_RADIUS, 
        FIELDS_STRING
    )
    
    end_time = time.time()
    print(f"\n--- T·ªïng th·ªùi gian (c·∫£ 2 phase): {end_time - start_time:.2f} gi√¢y ---")
    print(f"C√°c b·ªô l·ªçc logic c·∫ßn √°p d·ª•ng: {filters_to_apply}")
    
    # --- PH·∫¶N L∆ØU FILE ---
    if final_places:
        OUTPUT_DIR = "/Users/quannguyen/„ÉÅ„Éº„É†Âà∂‰Ωú/Rakutabi/json/test"
        
        now = datetime.datetime.now()
        timestamp = now.strftime("%Y%m%d_%H%M%S")
        safe_prefs = "_".join(user_choices)
        FILENAME = f"EnrichedSearch_{safe_prefs}_{timestamp}.json" # T√™n file m·ªõi
        OUTPUT_FILENAME = os.path.join(OUTPUT_DIR, FILENAME)

        print(f"\nƒêang l∆∞u {len(final_places)} k·∫øt qu·∫£ (ƒë√£ g·ªôp) v√†o: {OUTPUT_FILENAME}...")
        
        try:
            os.makedirs(OUTPUT_DIR, exist_ok=True)
            with open(OUTPUT_FILENAME, 'w', encoding='utf-8') as f:
                json.dump(final_places, f, indent=4, ensure_ascii=False)
            print("ƒê√£ l∆∞u file th√†nh c√¥ng!")
        
        except Exception as e:
            print(f"L·ªñI khi l∆∞u file: {e}")
            
    else:
        print("\nKh√¥ng c√≥ k·∫øt qu·∫£ n√†o ƒë·ªÉ l∆∞u.")